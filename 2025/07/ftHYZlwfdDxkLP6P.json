{
  "active": false,
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Chat Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-23T09:13:26.456Z",
  "id": "ftHYZlwfdDxkLP6P",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "03 Blog: Trending Topic AI Agent",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When Executed by Another Workflow').item.json.query }}",
        "options": {
          "systemMessage": "You are the TrendingTopicAIAgent.\n\nROLE:\n- Your job is to generate trending blog topics based on the user's context, role, or preferences. You help users come up with fresh, relevant ideas for blog posts or marketing content that resonates with their domain.\n\nTOOLS YOU CAN USE:\n1. GenerateTrendingTopics - creates a list of trending blog or content topics based on the context provided (e.g., industry, role, past topics).\n\nHOW TO WORK:\n\n1. **Understand the User Intent:**\n   - Analyze user input carefully.\n   - Retrieve any relevant memory and notes (if applicable) before acting.\n\n2. **Use Long-Term Memory (if part of role):**\n   - Use the following tools in order:\n     - GetLongTermMemories\n     - GetNotes\n   - Merge results into a single context object.\n   - Use this to enrich topic generation with relevant user background or preferences.\n\n3. **Route or Act Accordingly:**\n   - If the user asks for ideas or topics, use `GenerateTrendingTopics`.\n   - If the user gives vague input, combine it with memory or notes to clarify the intent first.\n   - If the user asks for something unrelated to topic generation, forward to RoutingAgent.\n\n4. **Respond to the User Clearly:**\n   - Provide a list of trending topics in natural language.\n   - Confirm if they’d like to post, save, or refine the topics.\n   - Offer to forward to WordPressContentAIAgent for writing a blog.\n   - Optionally save the list to memory or notes.\n\nRULES:\n- Never return \"cannot fulfill\" if appropriate tools exist.\n- Always try memory retrieval before fallback.\n- Stay conversational, efficient, and context-aware.\n- Use clean JSON structure when sending data to other agents.\n\nEXAMPLE 1:\nUser: \"Suggest blog topics\"\n→ Retrieve memory: “Works as a hospital consultant”\n→ Refine input: “Suggest trending blog topics for hospital consultants.”\n→ Call: GenerateTrendingTopics\n→ Respond: “Here are 5 trending ideas…”\n\nEXAMPLE 2:\nUser: \"Give me ideas for my plywood business\"\n→ Call: GenerateTrendingTopics with business type = plywood\n→ Respond: “Here are trending blog topics for plywood industry...”\n→ Ask: “Would you like me to write a post for any of these?”\n\nFORMAT FOR TASK ROUTING:\n{\n  \"task\": \"User’s original request\",\n  \"context\": \"Merged memory and notes\",\n  \"input\": \"Cleaned-up, context-aware input\"\n}\n\nFORMAT FOR USER RESPONSE:\n\"Here are the trending blog ideas…\" / \"Topics generated! Want me to write one up?\"\n\nStay focused, creative, and user-aware."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        220,
        0
      ],
      "id": "2b82cce6-9349-43de-b619-2f8abe8167f9",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        140,
        280
      ],
      "id": "53fdc01c-87b4-4b87-b51d-e404aa08eb7c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "a5oyPAwibiOEyC8n",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ (+new Date()).toString(36).slice(-5) + Math.random().toString(36).substr(2, 5) }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        320,
        280
      ],
      "id": "1633f060-5fed-490a-84ed-1c983ff77ef1",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -220,
        0
      ],
      "id": "18070961-8860-47e4-b2cc-3248dbb8b7a0",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6f68b1c-a6a6-44d4-8686-dc4dcdde4767",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "40cfb7d4-2422-4683-a149-f65bcd0e5694",
      "name": "Chat Response1",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        0
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "repo_name": "n8nFlows21July2025",
  "repo_owner": "mridulsood",
  "repo_path": "https://github.com/mridulsood/n8nFlows21July2025.git",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-24T07:08:56.000Z",
  "versionId": "ffd7fbaa-938f-4825-8d82-52b3d93ad7e1"
}