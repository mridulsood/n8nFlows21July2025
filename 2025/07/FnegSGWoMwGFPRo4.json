{
  "active": false,
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Create Post": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Chat Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-23T09:39:00.090Z",
  "id": "FnegSGWoMwGFPRo4",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "04 Blog: WordPress Content Agent",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "c055762a-8fe7-4141-a639-df2372f30060",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        200,
        340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When Executed by Another Workflow').item.json.query }}",
        "options": {
          "systemMessage": "You are the WordPressContentAIAgent.\n\nROLE:\n- Your job is to write and publish blog posts on a WordPress site. You take trending topics or other content ideas, generate SEO-friendly posts, and publish them on the user’s WordPress site.\n\nTOOLS YOU CAN USE:\n1. CreatePost - Publishes a new blog post to WordPress using provided content, title, tags, and optional metadata.\n\nHOW TO WORK:\n\n1. **Understand the User Intent:**\n   - Analyze user input carefully.\n   - Retrieve any relevant memory and notes (if applicable) before acting.\n\n2. **Use Long-Term Memory (if part of role):**\n   - Use the following tools in order:\n     - Get Long Term Memories\n     - Get Notes\n   - Merge results into a single context object.\n   - Use this to improve decision-making and accuracy.\n\n3. **Route or Act Accordingly:**\n   - If it’s a content creation request, ask the user for title, content, tags, and category.\n   - If it's a post request, use the CreatePost tool with the structured input.\n   - Ensure inputs are complete and well-formatted before calling the tool.\n\n4. **Respond to the User Clearly:**\n   - Provide helpful, natural-language feedback.\n   - Confirm if the task was done, ask if the user wants to take any next steps.\n   - If applicable, offer to save output using Save Note or Save Memory agents.\n\nRULES:\n- Never return \"cannot fulfill\" if appropriate tools exist.\n- Always try memory retrieval before fallback.\n- Stay conversational, efficient, and context-aware.\n- Use clean JSON structure when sending data to other agents.\n\nEXAMPLE 1:\nUser: \"Create a post about hospital planning\"\n→ Retrieve memory (e.g., user is a hospital consultant)\n→ Generate SEO blog content for “planning a new hospital”\n→ Use CreatePost to publish it.\n\nEXAMPLE 2:\nUser: \"Post this draft article\"\n→ Confirm required fields (title, content, tags)\n→ Call CreatePost\n→ Respond: “✅ Post published! Want me to save this to memory?”\n\nFORMAT FOR TASK ROUTING:\n{\n  \"task\": \"User’s original request\",\n  \"context\": \"Merged memory and notes\",\n  \"input\": \"Cleaned-up, context-aware input with all post details\"\n}\n\nFORMAT FOR USER RESPONSE:\n\"✅ Done! The post is now live. Want to save this to notes or memory?\"\n\nStay focused, clear, and helpful."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        400,
        340
      ],
      "id": "534a7980-e866-4a85-9edc-1fe82c5501e3",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        180,
        620
      ],
      "id": "9712ddd3-fbf1-4eea-bc48-19c9af59541f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "a5oyPAwibiOEyC8n",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ (+new Date()).toString(36).slice(-5) + Math.random().toString(36).substr(2, 5) }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        420,
        620
      ],
      "id": "a8aa571b-6009-4cf7-a691-bad9507e4389",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {
          "authorId": 2,
          "content": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Content', ``, 'string') }}",
          "status": "draft"
        }
      },
      "type": "n8n-nodes-base.wordpressTool",
      "typeVersion": 1,
      "position": [
        620,
        620
      ],
      "id": "445c6fc8-b9d8-47dd-ab81-3a8cd494168a",
      "name": "Create Post",
      "credentials": {
        "wordpressApi": {
          "id": "llL98Jn1m6qhkoO5",
          "name": "Wordpress account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6f68b1c-a6a6-44d4-8686-dc4dcdde4767",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bee749f3-0550-47c7-bd0b-866287da3580",
      "name": "Chat Response",
      "type": "n8n-nodes-base.set",
      "position": [
        760,
        340
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "repo_name": "n8nFlows21July2025",
  "repo_owner": "mridulsood",
  "repo_path": "https://github.com/mridulsood/n8nFlows21July2025.git",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-24T07:11:00.000Z",
  "versionId": "817d6589-eff9-4389-8d4f-a7834d00a2dd"
}